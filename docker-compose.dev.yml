# docker-compose up --force-recreate --build

version: '2.2'
services:
  elasticsearch:
    build: elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      #      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch/configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 19200:9200
      - 19300:9300
    networks:
      - lodenet
  processor:
    build: processor
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      storage:
        condition: service_healthy
      tika:
        condition: service_healthy
    volumes:
      - ~/repos/gopath/src/github.com/analogj/lodestone-processor/lodestone-document-processor-linux-amd64:/usr/bin/lodestone-document-processor
      - ~/repos/gopath/src/github.com/analogj/lodestone-processor/lodestone-thumbnail-processor-linux-amd64:/usr/bin/lodestone-thumbnail-processor
    networks:
      - lodenet
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - RABBITMQ_USER=lodestone
      - RABBITMQ_PASS=lodestone
  webapp:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    depends_on:
      elasticsearch:
        condition: service_healthy
      storage:
        condition: service_healthy
    volumes:
      - ./web/frontend:/lodestone/frontend
      - ./web/backend:/lodestone/backend
    networks:
      - lodenet
    labels:
      - "traefik.http.services.webapp.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.web.rule=PathPrefix(`/web`)"
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - RABBITMQ_USER=lodestone
      - RABBITMQ_PASS=lodestone

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9000/minio/health/ready || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      # this port is only necessary if you would like to view the admin backend for minio. MINIO_BROWSER=off must be commented out
      - 9000:9000
    volumes:
      - ./data/storage:/data
      - ./storage/config.json:/data/.minio.sys/config/config.json
      - ~/repos/gopath/src/github.com/analogj/lodestone-publisher/lodestone-fs-publisher-linux-amd64:/usr/bin/lodestone-fs-publisher

    environment:
#      - MINIO_BROWSER=off
#      - MINIO_WORM=on
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    networks:
      - lodenet
    labels:
      - "traefik.http.services.storage.loadbalancer.server.port=9000"
      - "traefik.http.routers.storage.rule=PathPrefix(`/storage`)"
      - "traefik.http.routers.storage.middlewares=storage01"
      - "traefik.http.middlewares.storage01.stripprefix.prefixes=/storage"

  reverse-proxy:
    image: traefik:v2.0
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command: --api.insecure=true --providers.docker --entrypoints.web.address=:80
    networks:
      - lodenet

  rabbitmq:
    image: rabbitmq:3-management #this should just be rabbitmq:3 for regular deployments
    ports:
      # this port is only necessary if you would like to view the admin backend for rabbitmq
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=lodestone
      - RABBITMQ_DEFAULT_PASS=lodestone
    networks:
      - lodenet

  tika:
    image: logicalspark/docker-tikaserver
    healthcheck:
      test: "curl --silent --fail localhost:9998/tika || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lodenet

#######################################################################################################################
# Optional Admin Containers for Development
#
  # docker run -d --rm --name elasticsearch  -e "discovery.type=single-node" -e "http.cors.enabled=true" -e "http.cors.allow-origin=*" -e "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization" -e "http.cors.allow-credentials=true" docker.elastic.co/elasticsearch/elasticsearch-oss:7.0.1
  dejavu:
    image: appbaseio/dejavu
    ports:
      - "1358:1358"
    networks:
      - lodenet



networks:
  lodenet:
