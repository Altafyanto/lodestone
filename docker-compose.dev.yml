###############################################################################
# Development Docker Compose configuration
###############################################################################
# This is the development docker-compose configuration for Lodestone.
# It's designed for live reloading and overriding RabbitMQ publishers/processors
# with custom built versions for testing. It also includes many additional port
# bindings for local testing & admin containers for viewing data stores.
#
# docker-compose -f docker-compose.dev.yml up --force-recreate --build

version: '2.2'
services:
  elasticsearch:
    build: elasticsearch
    environment:
      #      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch/configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 19200:9200
      - 19300:9300

  processor:
    build: processor
    depends_on:
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      webapp:
        condition: service_healthy
      tika:
        condition: service_healthy
    volumes:
      - ~/repos/gopath/src/github.com/analogj/lodestone-processor/lodestone-document-processor-linux-amd64:/usr/bin/lodestone-document-processor
      - ~/repos/gopath/src/github.com/analogj/lodestone-processor/lodestone-thumbnail-processor-linux-amd64:/usr/bin/lodestone-thumbnail-processor
#      - ~/repos/gopath/src/github.com/analogj/lodestone-publisher/lodestone-email-publisher-linux-amd64:/usr/bin/lodestone-email-publisher
    environment:
      - LS_ELASTICSEARCH_HOST=${LS_ELASTICSEARCH_HOST:-elasticsearch}
      - LS_ELASTICSEARCH_PORT=${LS_ELASTICSEARCH_PORT:-9200}
      - LS_RABBITMQ_HOST=${LS_RABBITMQ_HOST:-rabbitmq}
      - LS_RABBITMQ_PORT=${LS_RABBITMQ_PORT:-5672}
      - LS_API_HOST=${LS_API_HOST:-webapp}
      - LS_API_PORT=${LS_API_PORT:-3000}
      - LS_TIKA_HOST=${LS_TIKA_HOST:-tika}
      - LS_TIKA_PORT=${LS_TIKA_PORT:-9998}
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - RABBITMQ_USER=lodestone
      - RABBITMQ_PASS=lodestone
# WARNING: do not enable imap/email watcher yet. It's still a work-in-progress, and deletes documents after processing.
# Will be released with Beta 3.
#      - 'IMAP_HOSTNAME=imap.gmail.com'
#      - IMAP_PORT=993
#      - 'IMAP_USERNAME=lodestone@example.com'
#      - 'IMAP_PASSWORD=your-password-here'
#      - IMAP_ATTM_BUCKET=documents

  webapp:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    depends_on:
      elasticsearch:
        condition: service_healthy
      storage:
        condition: service_healthy
    volumes:
      - ./web/frontend:/lodestone/frontend
      - ./web/backend:/lodestone/backend
    ports:
      - 80:3000
    environment:
      - LS_STORAGE_HOST=${LS_STORAGE_HOST:-storage}
      - LS_STORAGE_PORT=${LS_STORAGE_PORT:-9000}
      - LS_STORAGE_PATH=${LS_STORAGE_PATH:-/storage/}
      - LS_ELASTICSEARCH_HOST=${LS_ELASTICSEARCH_HOST:-elasticsearch}
      - LS_ELASTICSEARCH_PORT=${LS_ELASTICSEARCH_PORT:-9200}
      - LS_RABBITMQ_HOST=${LS_RABBITMQ_HOST:-rabbitmq}
      - LS_RABBITMQ_PORT=${LS_RABBITMQ_PORT:-5672}
      - LS_RABBITMQ_MG_HOST=${LS_RABBITMQ_MG_HOST:-rabbitmq}
      - LS_RABBITMQ_MG_PORT=${LS_RABBITMQ_MG_PORT:-15672}
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - RABBITMQ_USER=lodestone
      - RABBITMQ_PASS=lodestone
      - DISABLE_FRONTEND=true

  storage:
    build: storage
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      # this port is only necessary if you would like to view the admin backend for minio. MINIO_BROWSER=off must be commented out
      - 9000:9000
    volumes:
      - ./data/storage:/data
      - ~/repos/gopath/src/github.com/analogj/lodestone-publisher/lodestone-fs-publisher-linux-amd64:/usr/bin/lodestone-fs-publisher
    environment:
      - LS_RABBITMQ_HOST=${LS_RABBITMQ_HOST:-rabbitmq}
      - LS_RABBITMQ_PORT=${LS_RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=lodestone
      - RABBITMQ_PASS=lodestone
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      #      - MINIO_BROWSER=off
      #      - MINIO_WORM=on

  rabbitmq:
    build: rabbitmq
    ports:
      # this port is only necessary if you would like to view the admin backend for rabbitmq
      - "15672:15672"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=lodestone
      - RABBITMQ_DEFAULT_PASS=lodestone

  tika:
    build: tika

#######################################################################################################################
# Optional Admin Containers for Development
#
  # docker run -d --rm --name elasticsearch  -e "discovery.type=single-node" -e "http.cors.enabled=true" -e "http.cors.allow-origin=*" -e "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization" -e "http.cors.allow-credentials=true" docker.elastic.co/elasticsearch/elasticsearch-oss:7.0.1
  dejavu:
    image: appbaseio/dejavu
    ports:
      - "1358:1358"
