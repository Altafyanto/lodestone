# docker-compose up --force-recreate --build

version: '2.2'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.1
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      #      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch/configs/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/configs/enterprise-search.yml:/usr/share/elasticsearch/config/enterprise-search.yml
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 19200:9200
      - 19300:9300
    networks:
      - lodenet

#  fscrawler:
#    build: fscrawler
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#    environment:
#      - JOB_NAME=lode
#    ports:
#      - 18080:8080
#    volumes:
#      - ./fscrawler/configs/lode:/usr/share/fscrawler/config/lode
#      - ./fscrawler/configs/_default/7/_settings.json:/usr/share/fscrawler/config/_default/7/_settings.json
#      - ./data/storage/documents/:/usr/share/fscrawler/data/:ro
#    networks:
#      - lodenet

  processor:
    build: processor
    depends_on:
      elasticsearch:
        condition: service_healthy
      queue:
        condition: service_healthy
    networks:
      - lodenet

  webapp:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./web/frontend:/lodestone/frontend
      - ./web/backend:/lodestone/backend
    networks:
      - lodenet
    labels:
      - "traefik.http.services.webapp.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.web.rule=PathPrefix(`/web`)"

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9000/minio/health/ready || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      # this port is only necessary if you would like to view the admin backend for minio. MINIO_BROWSER=off must be commented out
      - 9000:9000
    volumes:
      - ./data/storage:/data
      - ./storage/config.json:/data/.minio.sys/config/config.json
    environment:
#      - MINIO_BROWSER=off
#      - MINIO_WORM=on
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    networks:
      - lodenet
    labels:
      - "traefik.http.services.storage.loadbalancer.server.port=9000"
      - "traefik.http.routers.storage.rule=PathPrefix(`/storage`)"
      - "traefik.http.routers.storage.middlewares=storage01"
      - "traefik.http.middlewares.storage01.stripprefix.prefixes=/storage"


  storageconfig:
    build: storageconfig
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    networks:
      - lodenet
    depends_on:
      storage:
        condition: service_healthy

  queue:
    image: redis
    container_name: queue
    hostname: queue
    volumes:
      - ./data/queue:/data
    command: redis-server --appendonly yes
    networks:
      - lodenet

  reverse-proxy:
    image: traefik:v2.0
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command: --api.insecure=true --providers.docker --entrypoints.web.address=:80
    networks:
      - lodenet


#######################################################################################################################
# Optional Admin Containers for Development
#


  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:queue:6379
    ports:
      - "8081:8081"
    networks:
      - lodenet


networks:
  lodenet:
